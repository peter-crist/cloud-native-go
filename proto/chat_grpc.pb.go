// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: chat.proto

package chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Chat_Send_FullMethodName                = "/chat.Chat/Send"
	Chat_DemoCircuitBreaker_FullMethodName  = "/chat.Chat/DemoCircuitBreaker"
	Chat_DemoDebounce_FullMethodName        = "/chat.Chat/DemoDebounce"
	Chat_DemoRetry_FullMethodName           = "/chat.Chat/DemoRetry"
	Chat_DemoThrottle_FullMethodName        = "/chat.Chat/DemoThrottle"
	Chat_DemoTimeout_FullMethodName         = "/chat.Chat/DemoTimeout"
	Chat_DemoFanIn_FullMethodName           = "/chat.Chat/DemoFanIn"
	Chat_DemoFanOut_FullMethodName          = "/chat.Chat/DemoFanOut"
	Chat_DemoTimeoutAndRetry_FullMethodName = "/chat.Chat/DemoTimeoutAndRetry"
)

// ChatClient is the client API for Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatClient interface {
	Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error)
	DemoCircuitBreaker(ctx context.Context, in *CircuitBreakerRequest, opts ...grpc.CallOption) (*CircuitBreakerResponse, error)
	DemoDebounce(ctx context.Context, in *DebounceRequest, opts ...grpc.CallOption) (*DebounceResponse, error)
	DemoRetry(ctx context.Context, in *RetryRequest, opts ...grpc.CallOption) (*RetryResponse, error)
	DemoThrottle(ctx context.Context, in *ThrottleRequest, opts ...grpc.CallOption) (*ThrottleResponse, error)
	DemoTimeout(ctx context.Context, in *TimeoutRequest, opts ...grpc.CallOption) (*TimeoutResponse, error)
	DemoFanIn(ctx context.Context, in *FanInRequest, opts ...grpc.CallOption) (*FanInResponse, error)
	DemoFanOut(ctx context.Context, in *FanOutRequest, opts ...grpc.CallOption) (*FanOutResponse, error)
	DemoTimeoutAndRetry(ctx context.Context, in *TimeoutAndRetryRequest, opts ...grpc.CallOption) (*TimeoutAndRetryResponse, error)
}

type chatClient struct {
	cc grpc.ClientConnInterface
}

func NewChatClient(cc grpc.ClientConnInterface) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	out := new(SendResponse)
	err := c.cc.Invoke(ctx, Chat_Send_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) DemoCircuitBreaker(ctx context.Context, in *CircuitBreakerRequest, opts ...grpc.CallOption) (*CircuitBreakerResponse, error) {
	out := new(CircuitBreakerResponse)
	err := c.cc.Invoke(ctx, Chat_DemoCircuitBreaker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) DemoDebounce(ctx context.Context, in *DebounceRequest, opts ...grpc.CallOption) (*DebounceResponse, error) {
	out := new(DebounceResponse)
	err := c.cc.Invoke(ctx, Chat_DemoDebounce_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) DemoRetry(ctx context.Context, in *RetryRequest, opts ...grpc.CallOption) (*RetryResponse, error) {
	out := new(RetryResponse)
	err := c.cc.Invoke(ctx, Chat_DemoRetry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) DemoThrottle(ctx context.Context, in *ThrottleRequest, opts ...grpc.CallOption) (*ThrottleResponse, error) {
	out := new(ThrottleResponse)
	err := c.cc.Invoke(ctx, Chat_DemoThrottle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) DemoTimeout(ctx context.Context, in *TimeoutRequest, opts ...grpc.CallOption) (*TimeoutResponse, error) {
	out := new(TimeoutResponse)
	err := c.cc.Invoke(ctx, Chat_DemoTimeout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) DemoFanIn(ctx context.Context, in *FanInRequest, opts ...grpc.CallOption) (*FanInResponse, error) {
	out := new(FanInResponse)
	err := c.cc.Invoke(ctx, Chat_DemoFanIn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) DemoFanOut(ctx context.Context, in *FanOutRequest, opts ...grpc.CallOption) (*FanOutResponse, error) {
	out := new(FanOutResponse)
	err := c.cc.Invoke(ctx, Chat_DemoFanOut_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) DemoTimeoutAndRetry(ctx context.Context, in *TimeoutAndRetryRequest, opts ...grpc.CallOption) (*TimeoutAndRetryResponse, error) {
	out := new(TimeoutAndRetryResponse)
	err := c.cc.Invoke(ctx, Chat_DemoTimeoutAndRetry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServer is the server API for Chat service.
// All implementations must embed UnimplementedChatServer
// for forward compatibility
type ChatServer interface {
	Send(context.Context, *SendRequest) (*SendResponse, error)
	DemoCircuitBreaker(context.Context, *CircuitBreakerRequest) (*CircuitBreakerResponse, error)
	DemoDebounce(context.Context, *DebounceRequest) (*DebounceResponse, error)
	DemoRetry(context.Context, *RetryRequest) (*RetryResponse, error)
	DemoThrottle(context.Context, *ThrottleRequest) (*ThrottleResponse, error)
	DemoTimeout(context.Context, *TimeoutRequest) (*TimeoutResponse, error)
	DemoFanIn(context.Context, *FanInRequest) (*FanInResponse, error)
	DemoFanOut(context.Context, *FanOutRequest) (*FanOutResponse, error)
	DemoTimeoutAndRetry(context.Context, *TimeoutAndRetryRequest) (*TimeoutAndRetryResponse, error)
	mustEmbedUnimplementedChatServer()
}

// UnimplementedChatServer must be embedded to have forward compatible implementations.
type UnimplementedChatServer struct {
}

func (UnimplementedChatServer) Send(context.Context, *SendRequest) (*SendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedChatServer) DemoCircuitBreaker(context.Context, *CircuitBreakerRequest) (*CircuitBreakerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DemoCircuitBreaker not implemented")
}
func (UnimplementedChatServer) DemoDebounce(context.Context, *DebounceRequest) (*DebounceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DemoDebounce not implemented")
}
func (UnimplementedChatServer) DemoRetry(context.Context, *RetryRequest) (*RetryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DemoRetry not implemented")
}
func (UnimplementedChatServer) DemoThrottle(context.Context, *ThrottleRequest) (*ThrottleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DemoThrottle not implemented")
}
func (UnimplementedChatServer) DemoTimeout(context.Context, *TimeoutRequest) (*TimeoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DemoTimeout not implemented")
}
func (UnimplementedChatServer) DemoFanIn(context.Context, *FanInRequest) (*FanInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DemoFanIn not implemented")
}
func (UnimplementedChatServer) DemoFanOut(context.Context, *FanOutRequest) (*FanOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DemoFanOut not implemented")
}
func (UnimplementedChatServer) DemoTimeoutAndRetry(context.Context, *TimeoutAndRetryRequest) (*TimeoutAndRetryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DemoTimeoutAndRetry not implemented")
}
func (UnimplementedChatServer) mustEmbedUnimplementedChatServer() {}

// UnsafeChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServer will
// result in compilation errors.
type UnsafeChatServer interface {
	mustEmbedUnimplementedChatServer()
}

func RegisterChatServer(s grpc.ServiceRegistrar, srv ChatServer) {
	s.RegisterService(&Chat_ServiceDesc, srv)
}

func _Chat_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_Send_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).Send(ctx, req.(*SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_DemoCircuitBreaker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CircuitBreakerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).DemoCircuitBreaker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_DemoCircuitBreaker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).DemoCircuitBreaker(ctx, req.(*CircuitBreakerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_DemoDebounce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebounceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).DemoDebounce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_DemoDebounce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).DemoDebounce(ctx, req.(*DebounceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_DemoRetry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).DemoRetry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_DemoRetry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).DemoRetry(ctx, req.(*RetryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_DemoThrottle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThrottleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).DemoThrottle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_DemoThrottle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).DemoThrottle(ctx, req.(*ThrottleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_DemoTimeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).DemoTimeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_DemoTimeout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).DemoTimeout(ctx, req.(*TimeoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_DemoFanIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FanInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).DemoFanIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_DemoFanIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).DemoFanIn(ctx, req.(*FanInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_DemoFanOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FanOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).DemoFanOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_DemoFanOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).DemoFanOut(ctx, req.(*FanOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_DemoTimeoutAndRetry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeoutAndRetryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).DemoTimeoutAndRetry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_DemoTimeoutAndRetry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).DemoTimeoutAndRetry(ctx, req.(*TimeoutAndRetryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Chat_ServiceDesc is the grpc.ServiceDesc for Chat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Chat_Send_Handler,
		},
		{
			MethodName: "DemoCircuitBreaker",
			Handler:    _Chat_DemoCircuitBreaker_Handler,
		},
		{
			MethodName: "DemoDebounce",
			Handler:    _Chat_DemoDebounce_Handler,
		},
		{
			MethodName: "DemoRetry",
			Handler:    _Chat_DemoRetry_Handler,
		},
		{
			MethodName: "DemoThrottle",
			Handler:    _Chat_DemoThrottle_Handler,
		},
		{
			MethodName: "DemoTimeout",
			Handler:    _Chat_DemoTimeout_Handler,
		},
		{
			MethodName: "DemoFanIn",
			Handler:    _Chat_DemoFanIn_Handler,
		},
		{
			MethodName: "DemoFanOut",
			Handler:    _Chat_DemoFanOut_Handler,
		},
		{
			MethodName: "DemoTimeoutAndRetry",
			Handler:    _Chat_DemoTimeoutAndRetry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat.proto",
}
